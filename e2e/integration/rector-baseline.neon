parameters:
	ignoreErrors:
		-
			message: "#^Argument of an invalid type PHPStan\\\\Dependency\\\\NodeDependencies supplied for foreach, only iterables are supported\\.$#"
			count: 1
			path: repo/packages/Caching/FileSystem/DependencyResolver.php

		-
			message: "#^Calling PHPStan\\\\Dependency\\\\DependencyResolver\\:\\:resolveDependencies\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/Caching/FileSystem/DependencyResolver.php

		-
			message: "#^Calling PHPStan\\\\File\\\\FileWriter\\:\\:write\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/Caching/ValueObject/Storage/FileCacheStorage.php

		-
			message: "#^Parameter \\#1 \\$filename of method Symplify\\\\SmartFileSystem\\\\SmartFileSystem\\:\\:readFile\\(\\) expects string, string\\|null given\\.$#"
			count: 1
			path: repo/packages/FamilyTree/Reflection/FamilyRelationsAnalyzer.php

		-
			message: "#^Strict comparison using \\=\\=\\= between string\\|null and false will always evaluate to false\\.$#"
			count: 1
			path: repo/packages/FamilyTree/Reflection/FamilyRelationsAnalyzer.php

		-
			message: "#^Cannot call method getName\\(\\) on PHPStan\\\\Reflection\\\\ClassReflection\\|null\\.$#"
			count: 1
			path: repo/packages/NodeCollector/ScopeResolver/ParentClassScopeResolver.php

		-
			message: "#^Strict comparison using \\=\\=\\= between PHPStan\\\\Reflection\\\\ClassReflection\\|null and false will always evaluate to false\\.$#"
			count: 1
			path: repo/packages/NodeCollector/ScopeResolver/ParentClassScopeResolver.php

		-
			message: "#^Parameter \\#1 \\$classReflection of class PHPStan\\\\Type\\\\ThisType constructor expects PHPStan\\\\Reflection\\\\ClassReflection, string given\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/PHPStan/Type/TypeFactory.php

		-
			message: "#^Calling PHPStan\\\\Type\\\\UnionTypeHelper\\:\\:sortTypes\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/PHPStan/TypeHasher.php

		-
			message: "#^If condition is always false\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/PhpDocNodeVisitor/NameImportingPhpDocNodeVisitor.php

		-
			message: "#^Calling PHPStan\\\\Reflection\\\\BetterReflection\\\\BetterReflectionSourceLocatorFactory\\:\\:create\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/Reflection/BetterReflection/RectorBetterReflectionSourceLocatorFactory.php

		-
			message: "#^Class PHPStan\\\\Reflection\\\\BetterReflection\\\\SourceLocator\\\\OptimizedDirectorySourceLocator constructor invoked with 2 parameters, 3 required\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/Reflection/BetterReflection/SourceLocatorProvider/DynamicSourceLocatorProvider.php

		-
			message: "#^Creating new PHPStan\\\\Reflection\\\\BetterReflection\\\\SourceLocator\\\\OptimizedDirectorySourceLocator is not covered by backward compatibility promise\\. The class might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/Reflection/BetterReflection/SourceLocatorProvider/DynamicSourceLocatorProvider.php

		-
			message: "#^Creating new PHPStan\\\\Reflection\\\\BetterReflection\\\\SourceLocator\\\\OptimizedSingleFileSourceLocator is not covered by backward compatibility promise\\. The class might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/Reflection/BetterReflection/SourceLocatorProvider/DynamicSourceLocatorProvider.php

		-
			message: "#^Parameter \\#2 \\$phpVersion of class PHPStan\\\\Reflection\\\\BetterReflection\\\\SourceLocator\\\\OptimizedDirectorySourceLocator constructor expects PHPStan\\\\Php\\\\PhpVersion, array\\<string\\> given\\.$#"
			count: 1
			path: repo/packages/NodeTypeResolver/Reflection/BetterReflection/SourceLocatorProvider/DynamicSourceLocatorProvider.php

		-
			message: "#^Calling PHPStan\\\\Reflection\\\\Native\\\\NativeFunctionReflection\\:\\:getName\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/packages/ReadWrite/Guard/VariableToConstantGuard.php

		-
			message: "#^Negated boolean expression is always false\\.$#"
			count: 1
			path: repo/packages/ReadWrite/NodeAnalyzer/ReadWritePropertyAnalyzer.php

		-
			message: "#^Parameter \\#1 \\$classReflection of class PHPStan\\\\Type\\\\StaticType constructor expects PHPStan\\\\Reflection\\\\ClassReflection, string given\\.$#"
			count: 1
			path: repo/packages/StaticTypeMapper/PhpDocParser/IdentifierTypeMapper.php

		-
			message: "#^Parameter \\#1 \\$classReflection of class Rector\\\\StaticTypeMapper\\\\ValueObject\\\\Type\\\\ParentStaticType constructor expects PHPStan\\\\Reflection\\\\ClassReflection, string given\\.$#"
			count: 1
			path: repo/packages/StaticTypeMapper/PhpDocParser/IdentifierTypeMapper.php

		-
			message: "#^Parameter \\#1 \\$originalPath of method Symplify\\\\SmartFileSystem\\\\Normalizer\\\\PathNormalizer\\:\\:normalizePath\\(\\) expects string, string\\|null given\\.$#"
			count: 1
			path: repo/packages/VendorLocker/NodeVendorLocker/ClassMethodParamVendorLockResolver.php

		-
			message: "#^Strict comparison using \\=\\=\\= between string\\|null and false will always evaluate to false\\.$#"
			count: 1
			path: repo/packages/VendorLocker/NodeVendorLocker/ClassMethodParamVendorLockResolver.php

		-
			message: "#^Creating new PHPStan\\\\Php\\\\PhpVersion is not covered by backward compatibility promise\\. The class might change in a minor PHPStan version\\.$#"
			count: 2
			path: repo/packages/VersionBonding/Application/MissedRectorDueVersionChecker.php

		-
			message: "#^Method Rector\\\\VersionBonding\\\\PhpVersionedFilter\\:\\:filter\\(\\) should return array\\<T of Rector\\\\Core\\\\Contract\\\\Rector\\\\RectorInterface\\> but returns array\\<int, \\(Rector\\\\VersionBonding\\\\Contract\\\\MinPhpVersionInterface&T of Rector\\\\Core\\\\Contract\\\\Rector\\\\RectorInterface\\)\\|T of Rector\\\\Core\\\\Contract\\\\Rector\\\\RectorInterface\\>\\.$#"
			count: 1
			path: repo/packages/VersionBonding/PhpVersionedFilter.php

		-
			message: "#^Method Rector\\\\CodeQuality\\\\Rector\\\\Assign\\\\CombinedAssignRector\\:\\:refactor\\(\\) should return PhpParser\\\\Node\\|null but returns object\\.$#"
			count: 1
			path: repo/rules/CodeQuality/Rector/Assign/CombinedAssignRector.php

		-
			message: "#^Method Rector\\\\CodeQuality\\\\Rector\\\\Identical\\\\SimplifyConditionsRector\\:\\:createInversedBooleanOp\\(\\) should return PhpParser\\\\Node\\\\Expr\\\\BinaryOp\\|null but returns object\\.$#"
			count: 1
			path: repo/rules/CodeQuality/Rector/Identical/SimplifyConditionsRector.php

		-
			message: "#^Property PhpParser\\\\Node\\\\Stmt\\\\Return_\\:\\:\\$expr \\(PhpParser\\\\Node\\\\Expr\\|null\\) does not accept object\\.$#"
			count: 1
			path: repo/rules/CodeQuality/Rector/Return_/SimplifyUselessVariableRector.php

		-
			message: "#^Method Rector\\\\CodeQuality\\\\Rector\\\\Ternary\\\\UnnecessaryTernaryExpressionRector\\:\\:refactor\\(\\) should return PhpParser\\\\Node\\|null but returns object\\.$#"
			count: 1
			path: repo/rules/CodeQuality/Rector/Ternary/UnnecessaryTernaryExpressionRector.php

		-
			message: "#^Calling PHPStan\\\\Reflection\\\\Php\\\\PhpFunctionReflection\\:\\:getFileName\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/rules/CodingStyle/Reflection/VendorLocationDetector.php

		-
			message: "#^Method Rector\\\\CodingStyle\\\\Reflection\\\\VendorLocationDetector\\:\\:resolveReflectionFileName\\(\\) should return string\\|false but returns string\\|null\\.$#"
			count: 3
			path: repo/rules/CodingStyle/Reflection/VendorLocationDetector.php

		-
			message: "#^Parameter \\#1 \\$originalPath of method Symplify\\\\SmartFileSystem\\\\Normalizer\\\\PathNormalizer\\:\\:normalizePath\\(\\) expects string, string\\|null given\\.$#"
			count: 1
			path: repo/rules/Defluent/ConflictGuard/ParentClassMethodTypeOverrideGuard.php

		-
			message: "#^Strict comparison using \\=\\=\\= between string\\|null and false will always evaluate to false\\.$#"
			count: 1
			path: repo/rules/Defluent/ConflictGuard/ParentClassMethodTypeOverrideGuard.php

		-
			message: "#^PHPDoc tag @var for constant Rector\\\\Defluent\\\\Skipper\\\\FluentMethodCallSkipper\\:\\:ALLOWED_FLUENT_TYPES with type array\\<class\\-string\\> is not subtype of value array\\{'Symfony\\\\\\\\Component…', 'Symfony\\\\\\\\Component…', 'Doctrine\\\\\\\\ORM…', 'Nette\\\\\\\\Utils\\\\\\\\Finder', 'Nette\\\\\\\\Forms…', 'Nette\\\\\\\\DI…', 'Nette\\\\\\\\DI…', 'Nette\\\\\\\\DI…', \\.\\.\\.\\}\\.$#"
			count: 1
			path: repo/rules/Defluent/Skipper/FluentMethodCallSkipper.php

		-
			message: "#^Parameter \\#1 \\$callback of function array_map expects \\(callable\\(PhpParser\\\\Node\\\\Expr\\\\ArrayItem\\|null\\)\\: mixed\\)\\|null, Closure\\(PhpParser\\\\Node\\\\Expr\\\\ArrayItem\\)\\: PhpParser\\\\Node\\\\Arg given\\.$#"
			count: 1
			path: repo/rules/DowngradePhp74/Rector/Array_/DowngradeArraySpreadRector.php

		-
			message: "#^Creating new PHPStan\\\\Reflection\\\\Php\\\\PhpParameterReflection is not covered by backward compatibility promise\\. The class might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/rules/DowngradePhp80/NodeAnalyzer/NamedToUnnamedArgs.php

		-
			message: "#^Calling PHPStan\\\\Reflection\\\\Native\\\\NativeFunctionReflection\\:\\:getName\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/rules/DowngradePhp80/NodeAnalyzer/UnnamedArgumentResolver.php

		-
			message: "#^Parameter \\#1 \\$classReflection of class PHPStan\\\\Type\\\\StaticType constructor expects PHPStan\\\\Reflection\\\\ClassReflection, class\\-string given\\.$#"
			count: 1
			path: repo/rules/DowngradePhp80/Rector/ClassMethod/DowngradeStaticTypeDeclarationRector.php

		-
			message: "#^Elseif condition is always true\\.$#"
			count: 1
			path: repo/rules/DowngradePhp80/Reflection/DefaultParameterValueResolver.php

		-
			message: "#^Calling PHPStan\\\\Analyser\\\\MutatingScope\\:\\:assignExpression\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/rules/Php70/Rector/FuncCall/NonVariableToVariableOnFunctionCallRector.php

		-
			message: "#^Call to an undefined method PHPStan\\\\Reflection\\\\ClassReflection\\:\\:getNativeMethods\\(\\)\\.$#"
			count: 1
			path: repo/rules/Transform/NodeTypeAnalyzer/TypeProvidingExprFromClassResolver.php

		-
			message: "#^Unable to resolve the template type T in call to method static method PHPStan\\\\Reflection\\\\ParametersAcceptorSelector\\:\\:selectSingle\\(\\)$#"
			count: 1
			path: repo/rules/Transform/NodeTypeAnalyzer/TypeProvidingExprFromClassResolver.php

		-
			message: "#^Parameter \\#1 \\$classReflection of class PHPStan\\\\Type\\\\ThisType constructor expects PHPStan\\\\Reflection\\\\ClassReflection, string given\\.$#"
			count: 2
			path: repo/rules/TypeDeclaration/TypeInferer/ReturnTypeInferer.php

		-
			message: "#^Offset 'includes' on array\\{includes\\: array\\{'config/config\\.php'\\}\\} on left side of \\?\\? always exists and is not nullable\\.$#"
			count: 1
			path: repo/src/Bootstrap/ExtensionConfigResolver.php

		-
			message: "#^Do not call parent method if parent method is empty$#"
			count: 1
			path: repo/src/Console/ConsoleApplication.php

		-
			message: "#^Method Rector\\\\Core\\\\NodeManipulator\\\\BinaryOpManipulator\\:\\:inverseBinaryOp\\(\\) should return PhpParser\\\\Node\\\\Expr\\\\BinaryOp\\|null but returns object\\.$#"
			count: 1
			path: repo/src/NodeManipulator/BinaryOpManipulator.php

		-
			message: "#^Method Rector\\\\Core\\\\NodeManipulator\\\\BinaryOpManipulator\\:\\:inverseNode\\(\\) should return PhpParser\\\\Node but returns object\\.$#"
			count: 1
			path: repo/src/NodeManipulator/BinaryOpManipulator.php

		-
			message: "#^Method Rector\\\\Core\\\\NodeManipulator\\\\BinaryOpManipulator\\:\\:invertCondition\\(\\) should return PhpParser\\\\Node\\\\Expr\\\\BinaryOp\\|null but returns object\\.$#"
			count: 1
			path: repo/src/NodeManipulator/BinaryOpManipulator.php

		-
			message: "#^Right side of && is always true\\.$#"
			count: 1
			path: repo/src/NodeManipulator/ClassDependencyManipulator.php

		-
			message: "#^Creating new PHPStan\\\\Reflection\\\\Native\\\\NativeFunctionReflection is not covered by backward compatibility promise\\. The class might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/src/PHPStan/Reflection/TypeToCallReflectionResolver/ClosureTypeToCallReflectionResolver.php

		-
			message: "#^Calling PHPStan\\\\Reflection\\\\Php\\\\PhpFunctionReflection\\:\\:getFileName\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 1
			path: repo/src/PhpParser/AstResolver.php

		-
			message: "#^Calling PHPStan\\\\Reflection\\\\Php\\\\PhpFunctionReflection\\:\\:getName\\(\\) is not covered by backward compatibility promise\\. The method might change in a minor PHPStan version\\.$#"
			count: 6
			path: repo/src/PhpParser/AstResolver.php

		-
			message: "#^Parameter \\#1 \\$fileName of method Rector\\\\Core\\\\PhpParser\\\\AstResolver\\:\\:parseFileNameToDecoratedNodes\\(\\) expects string, string\\|null given\\.$#"
			count: 2
			path: repo/src/PhpParser/AstResolver.php

		-
			message: "#^Parameter \\#1 \\$filename of method Symplify\\\\SmartFileSystem\\\\SmartFileSystem\\:\\:readFile\\(\\) expects string, string\\|null given\\.$#"
			count: 3
			path: repo/src/PhpParser/AstResolver.php

		-
			message: "#^Strict comparison using \\=\\=\\= between string\\|null and false will always evaluate to false\\.$#"
			count: 3
			path: repo/src/PhpParser/AstResolver.php

		-
			message: "#^PHPDoc tag @var for constant Rector\\\\Core\\\\PhpParser\\\\Node\\\\AssignAndBinaryMap\\:\\:ASSIGN_OP_TO_BINARY_OP_CLASSES with type array\\<class\\-string\\<PhpParser\\\\Node\\\\Expr\\\\AssignOp\\>, class\\-string\\<PhpParser\\\\Node\\\\Expr\\\\AssignOp\\>\\> is incompatible with value array\\{PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\BitwiseOr\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\BitwiseAnd\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\BitwiseXor\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\Plus\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\Div\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\Mul\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\Minus\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', PhpParser\\\\Node\\\\Expr\\\\AssignOp\\\\Concat\\: 'PhpParser\\\\\\\\Node\\\\\\\\Expr…', \\.\\.\\.\\}\\.$#"
			count: 1
			path: repo/src/PhpParser/Node/AssignAndBinaryMap.php

